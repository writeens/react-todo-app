{"version":3,"sources":["NewTodoForm.js","Todo.js","colors.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["NewTodoForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","todo","handleChange","bind","assertThisInitialized","handleSubmit","evt","setState","defineProperty","target","name","value","preventDefault","addTodo","react_default","a","createElement","className","onSubmit","htmlFor","type","id","placeholder","onChange","Component","Todo","isEditing","task","renderTodo","handleRemove","handleEdit","handleUpdate","handleClick","removeTodo","index","updateTodo","toggleTodo","_this$props","date","completed","onClick","handleRefresh","style","backgroundColor","color","colors","Math","floor","random","length","TodoList","todos","add","render","remove","update","toggleCompletion","_this2","localforage","iterate","key","getItem","err","currentState","concat","toConsumableArray","item","_this3","newItem","objectSpread","uuid","Date","now","toString","slice","setItem","then","console","log","_this4","removeItem","filter","newTodo","_this5","updatedTodos","map","clear","array","_this6","src_Todo_0","src_NewTodoForm_0","defaultProps","App","src_TodoList_0","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.58c2823c.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport \"./NewTodoForm.css\";\r\n\r\nclass NewTodoForm extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { todo:\"\"};\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    // Monitor the state as user types\r\n    handleChange(evt){\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n         })\r\n    }\r\n\r\n    // Handle form submit and use methods within the parent component\r\n    handleSubmit(evt){\r\n        evt.preventDefault();\r\n        this.props.addTodo(this.state);\r\n        this.setState({ todo: \"\" })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <form className=\"NewTodoForm-form\" onSubmit={this.handleSubmit}>\r\n                <label htmlFor='task'>New Todo</label>\r\n                <div className=\"NewTodoForm-details\">\r\n                    <input\r\n                    type=\"text\"\r\n                    name=\"todo\"\r\n                    id=\"task\"\r\n                    placeholder=\"New Todo\"\r\n                    value={this.state.todo}\r\n                    onChange={this.handleChange}\r\n                    />\r\n                    <button><i className=\"fas fa-plus-circle\"></i></button>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n}\r\nexport default NewTodoForm;","import React, { Component } from 'react';\r\nimport \"./Todo.css\";\r\n\r\nclass Todo extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { isEditing: false, todo:this.props.task }\r\n        this.renderTodo = this.renderTodo.bind(this);\r\n        this.handleRemove = this.handleRemove.bind(this);\r\n        this.handleEdit = this.handleEdit.bind(this);\r\n        this.handleUpdate = this.handleUpdate.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n    handleEdit(){\r\n        this.setState({\r\n            isEditing: !this.state.isEditing\r\n        })\r\n    }\r\n\r\n    handleRemove(evt){\r\n        evt.preventDefault();\r\n        this.props.removeTodo(this.props.index);\r\n    }\r\n\r\n    handleUpdate(evt){\r\n        this.props.updateTodo(this.props.index, this.state.todo);\r\n        this.setState({\r\n            isEditing: !this.state.isEditing\r\n        })\r\n    }\r\n\r\n    handleChange(evt){\r\n        this.setState({\r\n            todo: evt.target.value\r\n         })\r\n    }\r\n    \r\n    handleClick(evt){\r\n        this.props.toggleTodo(this.props.id);\r\n    }\r\n\r\n    renderTodo(){\r\n        const {date, task, completed} = this.props;\r\n        return (\r\n            (this.state.isEditing) ? \r\n            <div className=\"Todo-edit\">\r\n                <form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"todo\"\r\n                        value={this.state.todo}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                    <button onClick={this.handleRefresh}>SAVE</button>\r\n                </form>\r\n            </div>\r\n            : \r\n            <div>\r\n                <div className=\"Todo-todo\">\r\n                    <li className=\"Todo-li\">\r\n                        <div onClick={this.handleClick} className={(completed) ? \"Todo-completed Todo-text\" : \"Todo-text\"}>\r\n                            {task}\r\n                        </div>\r\n                    </li>\r\n                    <div className=\"Todo-buttons\">\r\n                        <button className=\"Todo-edit\" onClick={this.handleEdit}><i className=\"fas fa-edit\"></i></button>\r\n                        <button className=\"Todo-remove\" onClick={this.handleRemove}><i className=\"fas fa-window-close\"></i></button>\r\n                    </div>\r\n                </div>\r\n                <p id=\"date\" className=\"Todo-date\">{date}</p>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n    render(){\r\n        return (\r\n            <div className=\"Todo\" style={{backgroundColor: this.props.color}}>\r\n                {this.renderTodo()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Todo;","function colors(){\r\n    let colors = [\r\n        \"#005876\", \r\n        \"#FFB800\", \r\n        \"#60D9BD\", \r\n        \"#FF2C51\", \r\n        \"#7995FF\", \r\n        \"#C260CB\",\r\n        \"#00CEE1\",\r\n        \"#F58700\",\r\n        \"#A2D580\"]\r\n        let rndIndex = Math.floor(Math.random() * colors.length)\r\n        return colors[rndIndex];\r\n}\r\n\r\nexport default colors;","import React, { Component } from 'react'\r\nimport uuid from \"uuid/v4\";\r\nimport localforage from \"localforage\";\r\nimport NewTodoForm from './NewTodoForm';\r\nimport Todo from \"./Todo\";\r\nimport \"./TodoList.css\";\r\nimport colors from \"./colors\";\r\n\r\nclass TodoList extends Component {\r\n    static defaultProps = {\r\n        color: colors\r\n    }\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { todos: [] };\r\n        this.add = this.add.bind(this);\r\n        this.render = this.render.bind(this);\r\n        this.remove = this.remove.bind(this);\r\n        this.update = this.update.bind(this);\r\n        this.toggleCompletion = this.toggleCompletion.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        // localforage.clear()\r\n        localforage.iterate((value, key, index) => {\r\n            localforage.getItem(key, (err, value) => {\r\n                if(err || value === null){\r\n                    this.setState({ todos: [] })\r\n                }else {\r\n                    this.setState(currentState => ({\r\n                        todos: [...currentState.todos, value]\r\n                    }))\r\n                }\r\n            })\r\n        })\r\n        \r\n    }\r\n\r\n    //Method to add an item (todo object) to the state\r\n    add(item){\r\n        let newItem = {...item, \r\n            id:uuid(),\r\n            date:Date(Date.now()).toString().slice(0, 15), \r\n            completed: false, \r\n            index: this.state.todos.length + 1,\r\n            color: colors()\r\n        }\r\n        // Store todo item and then update the state\r\n        localforage.setItem(`\"${newItem.index}\"`, newItem).then(value => {\r\n            this.setState(currentState => ({\r\n                todos: [...currentState.todos, value]\r\n            }))\r\n        })\r\n        console.log(this.state.todos);\r\n        // \r\n        \r\n    }\r\n\r\n    // Remove todo method\r\n    remove(index){\r\n        console.log(index);\r\n        // Remove the todo object from storage based on index then update the state\r\n        localforage.removeItem(`\"${index}\"`).then(() => {\r\n            this.setState({\r\n                todos: this.state.todos.filter(todo => todo.index !== index)\r\n            })\r\n        })\r\n    }\r\n\r\n    // Update todo method\r\n    update(index, newTodo){\r\n        let oldTodos = this.state.todos \r\n        //Create a new array with updated todos\r\n        let updatedTodos = oldTodos.map((todo) => {\r\n            if(todo.index === index){\r\n                todo = {...todo, todo:newTodo}\r\n            }\r\n            return todo;\r\n        });\r\n        \r\n        // Clear old array from local forage\r\n        // Add each todo from the new array to local storage \r\n        // Attach the index to each new item \r\n        localforage.clear().then(() => {\r\n            let array = [];\r\n            updatedTodos.map(todo => {\r\n                array = [...array, todo]\r\n                console.log(array);\r\n                localforage.setItem(`\"${todo.index}\"`, todo).then(value => {\r\n                    this.setState({ todos: array })\r\n            })\r\n            return null;\r\n            \r\n        })})\r\n    }\r\n\r\n    toggleCompletion(id){\r\n        const updatedTodos = this.state.todos.map(todo => {\r\n            if(todo.id === id){\r\n                return {...todo, completed: !todo.completed}\r\n            }\r\n            return todo;\r\n        });\r\n        this.setState({\r\n            todos: updatedTodos\r\n        })\r\n    }\r\n\r\n    renderTodo(){\r\n        let todos = this.state.todos.map(todo => \r\n            <Todo \r\n                task={todo.todo}\r\n                key={todo.id}\r\n                date={todo.date}\r\n                id = {todo.id}\r\n                completed = {todo.completed}\r\n                removeTodo={this.remove}\r\n                updateTodo={this.update}\r\n                toggleTodo={this.toggleCompletion}\r\n                index={todo.index}\r\n                color={todo.color}\r\n            />)\r\n        return todos\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <h1><span className=\"TodoList-what\">What </span><span className=\"TodoList-todo\">Todo</span><span className=\"TodoList-q\">?</span></h1>\r\n                <NewTodoForm addTodo={this.add}/>\r\n                <ul className=\"TodoList-ul\">\r\n                    {this.renderTodo()}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default TodoList;","import React from 'react';\nimport './App.css';\nimport TodoList from \"./TodoList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}